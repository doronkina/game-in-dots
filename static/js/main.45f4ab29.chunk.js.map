{"version":3,"sources":["types/types.ts","api/api.ts","store/reducers/gameSettingsReducer.ts","store/reducers/winnersReducer.ts","store/store.ts","components/GameBoard/Settings/Settings.tsx","components/GameBoard/Settings/SettingsContainer.tsx","components/GameBoard/ResultPanel/ResultPanel.tsx","components/GameBoard/ResultPanel/ResultPanelContainer.tsx","components/GameBoard/PlayField/PlayField.tsx","components/GameBoard/GameBoard.tsx","components/LeaderBoard/LeaderBoard.tsx","components/LeaderBoard/LeaderBoardContainer.tsx","App.tsx","AppContainer.tsx","serviceWorker.ts","index.tsx"],"names":["GameStatusEnum","instance","axios","create","baseURL","getGameSettings","a","get","res","data","getWinners","postWinner","winner","post","initialState","easyMode","normalMode","hardMode","gameSettingsReducer","state","action","type","modes","winners","setWinners","winnersReducer","rootReducer","combineReducers","gameSettings","store","createStore","applyMiddleware","thunk","Settings","props","useState","selectedMode","setSelectedMode","disabled","gameStatus","isPreparing","value","onChange","e","target","setGameMode","placeholder","userName","setUserName","isPlaying","onClick","setGameStatus","setPoints","user","computer","gameOver","connect","ResultPanel","points","className","dispatch","toPostWinner","useEffect","date","moment","format","PlayField","playField","setPlayField","currentCell","setCurrentCell","gameMode","field","y","x","createPlayField","changePlayField","player","newPlayField","length","randomCell","Math","floor","random","timerId","setInterval","newPoints","delay","clearTimeout","onClickHandler","posY","parentElement","lastIndexOf","slice","posX","colors","map","row","key","cell","style","backgroundColor","GameBoard","SettingsContainer","LeaderBoard","id","App","toGetGameSettings","toGetWinners","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45f4ab29.chunk.js","sourcesContent":["export enum GameStatusEnum {\n    isPreparing = 0,\n    isPlaying = 1,\n    gameOver = 2\n}\n\nexport type ModeType = {\n    field: 5 | 10 | 15\n    delay: 2000 | 1000 | 900\n}\nexport type GameSettingsType = {\n    easyMode: ModeType\n    normalMode: ModeType\n    hardMode: ModeType\n}\n\nexport type WinnerType = {\n    winner: string\n    date: string\n    id?: number\n}\nexport type WinnersType = Array<WinnerType>\n\nexport type PlayFieldType = Array< Array<number> >\n\nexport type PointsType = {\n    user: number\n    computer: number\n}","import axios from 'axios'\nimport { GameSettingsType, WinnerType, WinnersType } from '../types/types'\n\nconst instance = axios.create({\n    baseURL: 'https://starnavi-frontend-test-task.herokuapp.com'\n})\n\nexport const getGameSettings = async () => {\n    const res = await instance.get<GameSettingsType>('/game-settings')\n    return res.data\n}\n\nexport const getWinners = async () => {\n    const res = await instance.get<WinnersType>('/winners')\n    return res.data\n}\n\nexport const postWinner = async (winner: WinnerType) => {\n    const res = await instance.post('/winners', winner)\n    return res.data\n}","import { ThunkAction } from 'redux-thunk'\nimport { RootStateType } from '../store'\nimport { ModeType, GameSettingsType } from '../../types/types'\nimport { getGameSettings as toGetGameSettings } from './../../api/api'\n\nconst SET_GAME_SETTINGS = 'SET-GAME-SETTINGS'\n\ntype InitialStateType = {\n    easyMode: ModeType | null,\n    normalMode: ModeType | null,\n    hardMode: ModeType | null\n}\nlet initialState: InitialStateType = {\n    easyMode: null,\n    normalMode: null,\n    hardMode: null\n}\n\ntype ActionsTypes = SetGameSettingsActionType\n\nconst gameSettingsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_GAME_SETTINGS:\n            return {\n                ...state,\n                easyMode: action.modes.easyMode,\n                normalMode: action.modes.normalMode,\n                hardMode: action.modes.hardMode\n            }\n        default:\n            return state\n    }\n}\n\ntype SetGameSettingsActionType = {\n    type: typeof SET_GAME_SETTINGS\n    modes: GameSettingsType\n}\nconst setGameSettings = (modes: GameSettingsType): SetGameSettingsActionType => ( {type: SET_GAME_SETTINGS, modes} )\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsTypes>\n\nexport const getGameSettings = (): ThunkActionType => async dispatch => {\n    const res = await toGetGameSettings()\n    await dispatch( setGameSettings(res) )\n}\n\nexport default gameSettingsReducer","import { ThunkAction } from 'redux-thunk'\nimport { RootStateType } from '../store'\nimport { WinnersType, WinnerType } from '../../types/types'\nimport { \n    getWinners as toGetWinners,\n    postWinner as toPostWinner\n} from './../../api/api'\n\nconst SET_WINNERS = 'SET-WINNERS'\n\ntype InitialStateType = {\n    winners: WinnersType | null\n}\nlet initialState: InitialStateType = {\n    winners: null\n}\n\ntype ActionsTypes = SetWinnersActionType\n\nconst winnersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_WINNERS:\n            return {\n                ...state,\n                winners: action.winners\n            }\n        default:\n            return state\n    }\n}\n\ntype SetWinnersActionType = {\n    type: typeof SET_WINNERS\n    winners: WinnersType\n}\nconst setWinners = (winners: WinnersType): SetWinnersActionType => ( {type: SET_WINNERS, winners} )\n\ntype ThunkActionType = ThunkAction<Promise<void>, RootStateType, unknown, ActionsTypes>\nexport const getWinners = (): ThunkActionType => async dispatch => {\n    const res = await toGetWinners()\n    await dispatch( setWinners(res) )\n};\nexport const postWinner = (winner: WinnerType): ThunkActionType => async dispatch => {\n    const res = await toPostWinner(winner)\n    await dispatch( setWinners(res) )\n}\n\nexport default winnersReducer","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport gameSettingsReducer from './reducers/gameSettingsReducer'\nimport winnersReducer from './reducers/winnersReducer'\n\nlet rootReducer = combineReducers({\n    gameSettings: gameSettingsReducer,\n    winners: winnersReducer\n})\n\nexport type RootStateType = ReturnType<typeof rootReducer>\n\nlet store = createStore( rootReducer, applyMiddleware(thunk) )\n\nexport default store","import React, { useState, Dispatch, SetStateAction } from 'react'\nimport { PropsType } from './SettingsContainer'\nimport { GameStatusEnum } from '../../../types/types'\n\nconst Settings: React.FC<PropsType> = props => {\n    let [selectedMode, setSelectedMode]: [string, Dispatch<SetStateAction<string>>] = useState('')\n\n    const changedGameMode = (e: any) => {\n        setSelectedMode(e.target.value)\n        props.setGameMode( { ...props.gameSettings[e.target.value] } )\n    }\n\n    const onClickHandler = () => {\n        if (props.gameStatus === GameStatusEnum.isPreparing) {\n            props.setGameStatus(GameStatusEnum.isPlaying)\n        } else {\n            props.setGameStatus(GameStatusEnum.isPreparing)\n            setSelectedMode('')\n            props.setGameMode(null)\n            props.setPoints( {user: 0, computer:0} )\n        }\n    }\n\n    return (\n        <form>\n            <select disabled={props.gameStatus !== GameStatusEnum.isPreparing} value={selectedMode} onChange={changedGameMode}>\n                {!selectedMode && <option value=''>Pick game mode</option>}\n                <option value='easyMode'>Easy</option>\n                <option value='normalMode'>Normal</option>\n                <option value='hardMode'>Hard</option>\n            </select>\n            <input type='text' disabled={props.gameStatus !== GameStatusEnum.isPreparing} placeholder='Enter your name' value={props.userName} onChange={ e => props.setUserName(e.target.value) } />\n            <button type='button' disabled={!selectedMode || !props.userName || props.gameStatus === GameStatusEnum.isPlaying} onClick={onClickHandler}>\n                {props.gameStatus !== GameStatusEnum.gameOver ? 'PLAY' : 'PLAY AGAIN'}\n            </button>\n        </form>\n    )\n}\n\nexport default Settings","import React, { Dispatch, SetStateAction } from 'react'\nimport { connect } from 'react-redux'\nimport { GameSettingsType, GameStatusEnum, PointsType } from '../../../types/types'\nimport Settings from './Settings'\n\nexport type PropsType = {\n    gameSettings: GameSettingsType | any\n    gameStatus: GameStatusEnum\n    setGameStatus: Dispatch<SetStateAction<GameStatusEnum>>\n    setGameMode: Dispatch<SetStateAction<null>>\n    setPoints: Dispatch<SetStateAction<PointsType>>\n    userName: string\n    setUserName: Dispatch<SetStateAction<string>>\n}\nconst GameContainer: React.FC<PropsType> = props => {\n    return <Settings {...props} />\n}\n\ntype StateType = {\n    gameSettings: GameSettingsType\n}\nlet mapStateToProps = (state: StateType) => {\n    return {\n        gameSettings: state.gameSettings\n    }\n}\nexport default connect(mapStateToProps)(GameContainer)","import React from 'react'\nimport { PropsType } from './ResultPanelContainer'\nimport { GameStatusEnum } from '../../../types/types'\n\nconst ResultPanel: React.FC<PropsType> = ( {gameStatus, points, userName} ) => {\n    return (\n        <div className=\"resultPanel\">\n            {gameStatus === GameStatusEnum.gameOver &&\n                `${points.user > points.computer ? userName : 'computer'} won`\n            }\n        </div>\n    )\n}\n\nexport default ResultPanel","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport { postWinner } from '../../../store/reducers/winnersReducer'\nimport { GameStatusEnum, PointsType, WinnerType } from '../../../types/types'\nimport ResultPanel from './ResultPanel'\n\nexport type PropsType = {\n    gameStatus: GameStatusEnum\n    points: PointsType\n    userName: string\n    postWinner: (winner: WinnerType) => Promise<void>\n}\nconst ResultPanelContainer: React.FC<PropsType> = props => {\n    useEffect(() => {\n        const winner = props.points.user > props.points.computer ? props.userName : 'computer'\n        const date = moment().format('lll')\n\n        props.postWinner( {winner, date} )\n    })\n\n    return <ResultPanel {...props} />\n}\n\nexport default connect( null, {postWinner} )(ResultPanelContainer)","import React, { useState, useEffect, Dispatch, SetStateAction } from 'react'\nimport { ModeType, GameStatusEnum, PointsType, PlayFieldType } from '../../../types/types'\n\ntype PropsType = {\n    gameMode: ModeType\n    gameStatus: GameStatusEnum\n    setGameStatus: Dispatch<SetStateAction<GameStatusEnum>>\n    points: PointsType\n    setPoints: Dispatch<SetStateAction<PointsType>>\n}\nconst PlayField: React.FC<PropsType> = props => {\n    let [playField, setPlayField]: any = useState(null)\n    let [currentCell, setCurrentCell]: any = useState(null)\n\n    const createPlayField = (field: number): PlayFieldType => {\n        let playField: PlayFieldType = []\n        for (let y = 0; y < field; y++) {\n            playField[y] = []\n            for (let x = 0; x < field; x++) {\n                playField[y][x] = 0\n            }\n        }\n\n        return playField\n    }\n\n    useEffect(() => {\n        if (props.gameMode.field) setPlayField( createPlayField(props.gameMode.field) )\n    }, [props.gameMode.field])\n\n    const changePlayField = (player: 'user' | 'computer') => {\n        const newPlayField = []\n        for (let y = 0; y < playField.length; y++) {\n            newPlayField[y] = [...playField[y]]\n        }\n        newPlayField[currentCell.y][currentCell.x] = player === 'user' ? 2 : 3\n\n        return newPlayField\n    }\n\n    const randomCell = (playField: PlayFieldType) => {\n        let x, y\n        do {\n            x = Math.floor(Math.random() * playField.length)\n            y = Math.floor(Math.random() * playField.length)\n        } while (playField[y][x])\n        \n        setCurrentCell( {x, y} )\n    }\n\n    useEffect(() => {\n        if (props.gameStatus === GameStatusEnum.isPlaying) {\n            if (!currentCell) {\n                randomCell(playField)\n            } else {\n                const timerId = setInterval(() => {\n                    const newPlayField = changePlayField('computer')\n                    setPlayField(newPlayField);\n\n                    const newPoints = props.points.computer + 1\n                    props.setPoints( {...props.points, computer: newPoints} )\n                    \n                    if (newPoints > playField.length ** 2 / 2) {\n                        props.setGameStatus(GameStatusEnum.gameOver)\n                        setCurrentCell(null)\n                    } else {\n                        randomCell(newPlayField)\n                    }\n                }, props.gameMode.delay)\n\n                return () => clearTimeout(timerId)\n            }\n        }\n    })\n\n    const onClickHandler = (e: any) => {\n        if (props.gameStatus === GameStatusEnum.isPlaying) {\n            const posY = e.target.parentElement.className.lastIndexOf(' ') + 1\n            const y = +e.target.parentElement.className.slice(posY)\n\n            const posX = e.target.className.lastIndexOf(' ') + 1\n            const x = +e.target.className.slice(posX)\n\n            let newPlayField, newPoints\n            if (currentCell.y === y && currentCell.x === x) {\n                newPlayField = changePlayField('user')\n\n                newPoints = props.points.user + 1\n                props.setPoints( {...props.points, user: newPoints} )\n            } else {\n                newPlayField = changePlayField('computer')\n\n                newPoints = props.points.computer + 1\n                props.setPoints( {...props.points, computer: newPoints} )\n            }\n\n            if (newPoints > playField.length ** 2 / 2) props.setGameStatus(GameStatusEnum.gameOver)\n            setPlayField(newPlayField)\n            setCurrentCell(null)\n        }\n    }\n\n    const colors = ['white', 'skyblue', 'lightgreen', 'pink']\n\n    return (\n        <div className=\"playField\">\n            {playField && playField.map((row: Array<number>, y: number) => {\n                return (\n                    <div key={y} className={`row${row.length} ${y}`}>\n                        {row.map((cell, x) => {\n                            return (\n                                <div key={x} className={`cell ${x}`} onClick={onClickHandler}\n                                    style={ { backgroundColor: colors[currentCell && currentCell.y === y && currentCell.x === x ? 1 : cell] } }\n                                ></div>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default PlayField","import React, { useState, Dispatch, SetStateAction } from 'react'\nimport { GameStatusEnum, ModeType } from '../../types/types'\nimport SettingsContainer from './Settings/SettingsContainer'\nimport ResultPanelContainer from './ResultPanel/ResultPanelContainer'\nimport PlayField from './PlayField/PlayField'\n\nconst GameBoard = () => {\n    let [gameStatus, setGameStatus] = useState(GameStatusEnum.isPreparing)\n    let [gameMode, setGameMode]: [ModeType, Dispatch<SetStateAction<ModeType>>] | [null, Dispatch<SetStateAction<null>>] = useState(null)\n    let [userName, setUserName]: [string, Dispatch<SetStateAction<string>>] = useState('')\n\n    let [points, setPoints] = useState( {user: 0, computer:0} )\n\n    return (\n        <div className=\"gameBoard\">\n            <SettingsContainer gameStatus={gameStatus} setGameStatus={setGameStatus} setGameMode={setGameMode} setPoints={setPoints} userName={userName} setUserName={setUserName} />\n            {gameStatus === GameStatusEnum.gameOver && <ResultPanelContainer gameStatus={gameStatus} points={points} userName={userName} />}\n            {gameMode && <PlayField gameMode={gameMode} gameStatus={gameStatus} setGameStatus={setGameStatus} points={points} setPoints={setPoints} />}\n        </div>\n    )\n}\n\nexport default GameBoard","import React from 'react'\nimport { PropsType } from './LeaderBoardContainer'\n\nconst LeaderBoard: React.FC<PropsType> = props => {\n    const winners = props.winners && \n        props.winners.map(winner => {\n            return (\n                <div key={winner.id} className=\"winner\">\n                    <span>{winner.winner}</span>\n                    <span>{winner.date}</span>\n                </div>\n            )\n        })\n    \n    return (\n        <div className=\"leaderBoard\">\n            <h2>Leader Board</h2>\n            <div className=\"winners\">\n                {winners}\n            </div>\n        </div>\n    )\n}\n\nexport default LeaderBoard","import React from 'react'\nimport { connect } from 'react-redux'\nimport { WinnersType } from '../../types/types'\nimport LeaderBoard from './LeaderBoard'\n\nexport type PropsType = {\n    winners: WinnersType\n}\nconst LeaderBoardContainer: React.FC<PropsType> = props => {\n    return <LeaderBoard {...props} />\n}\n\ntype StateType = {\n    winners: {\n        winners: WinnersType\n    }\n}\nlet mapStateToProps = (state: StateType) => {\n    return {\n        winners: state.winners.winners\n    }\n}\n\nexport default connect(mapStateToProps)(LeaderBoardContainer)","import React from 'react'\nimport './App.scss'\nimport GameBoard from './components/GameBoard/GameBoard'\nimport LeaderBoardContainer from './components/LeaderBoard/LeaderBoardContainer'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <GameBoard />\n      <LeaderBoardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { getGameSettings } from './store/reducers/gameSettingsReducer'\nimport { getWinners } from './store/reducers/winnersReducer'\nimport App from './App'\n\ntype PropsType = {\n    getGameSettings: () => void\n    getWinners: () => void\n}\nconst AppContainer: React.FC<PropsType> = props => {\n    useEffect( () => {\n        props.getGameSettings()\n        props.getWinners()\n    } );\n\n    return <App />\n}\n\nexport default connect( null, {getGameSettings, getWinners} )(AppContainer)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport store from './store/store';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}